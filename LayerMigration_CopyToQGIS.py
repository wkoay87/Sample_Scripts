# ---------------------------------------------------------------------------
# IHS_DrillingInfo_Migration.py
# Created on: Tue Mar 04 2014 01:28:33 PM
#   (generated by ArcGIS/ModelBuilder)
# ---------------------------------------------------------------------------

# Import system modules
import sys, string, os, arcgisscripting, logging, time,argparse,cx_Oracle
from datetime import datetime
from datetime import date
from subprocess import *

# Import email items
from email_helper import send_mail

# Create the Geoprocessor object
gp = arcgisscripting.create()

# Load required toolboxes...
# Path may be different like on Qremgis-test the path is E drive
# ********Script will have to be altered when upgrading to 10.2********
gp.AddToolbox("E:/Program Files (x86)/ArcGIS/ArcToolbox/Toolboxes/Data Management Tools.tbx")
gp.AddToolbox("E:/Program Files (x86)/ArcGIS/ArcToolbox/Toolboxes/Conversion Tools.tbx")


DI_XREF = [['DI09_Counties48','DRILLINGINFO_COUNTIES'],
           ['DI_Landtracs','DRILLINGINFO_LAND_TRACTS'],
           ['di_LegalLease','DRILLINGINFO_LEGAL_LEASE'],
           ['DI_TX_producing_units','DRILLINGINFO_TX_PROD_UNITS'],
           ['di_Completions','DRILLINGINFO_COMPLETIONS'],
           ['di_Wells','DRILLINGINFO_WELLS'],
           ['di_WellBHL','DRILLINGINFO_WELL_BHL'],
           ['di_Plugging','DRILLINGINFO_PLUGGINGS'],
           ['di_PrePermits','DRILLINGINFO_PREPERMITS'],
           ['di_Production','DRILLINGINFO_PRODUCTION'],
           ['di_Permits','DRILLINGINFO_PERMITS'],
           ['TX_Pipelines','DRILLINGINFO_PIPELINES'],
           ['di_wells_directionals','DRILLINGINFO_DIRECTIONALS'],
           ['ReleaseStatus','DRILLINGINFO_RELEASE_STATUS'],
           ['di_WellLogs','DRILLINGINFO_WELL_LOGS']]

IHS_XREF = [['UB_WELL_SURFACE','IHS_UB_WELL_SURFACE' ],
            ['UB_WELL_BOTTOM','IHS_UB_WELL_BOTTOM' ],
            ['UB_WELL_BORESTICK', 'IHS_UB_WELL_BORESTICK' ],
            ['UB_WELL_ACTIVITY','IHS_UB_WELL_ACTIVITY' ],
            ['UB_PRODUCTION','IHS_UB_PRODUCTION' ],
            ['FIELDS_OPERATORS','IHS_UB_FIELDS_OPERATORS' ],
            ['FIELDS_NORTHEAST','IHS_UB_FIELDS_NORTHEAST' ],
            ['FIELDS_FORMATIONS','IHS_UB_FIELDS_FORMATIONS' ],
            ['FIELDS','IHS_UB_FIELDS' ]]            

# Process: Feature Class to Feature Class...
# Copies Drilling Info features from server path to EXT_VENDOR with proper naming convention "_T"
def FCCopy(stg,temp,stgname):
    if gp.Exists(stg):
        gp.CopyFeatures_management(stg, temp, "", "0", "0", "0")
        logstr('     -- Copied '+stgname)    

def LayerCopy(layertype,gdbversion):
    if layertype == 'DI':
        if gdbversion == '931':
            DI_gdbv = r"\\shares\backups\qgis-workspace\DRILLINGINFO\DI_931.gdb"
        elif gdbversion == '10':
            DI_gdbv = r"\\shares\backups\qgis-workspace\DRILLINGINFO\DI_10.gdb"
        i = len(DI_XREF)
        
        for x in range(0,i):
            fc_temp = EXT_VENDOR_BSM_QGIS510_sde + "\\" + DI_XREF[x][1]+"_T"
            FCCopy(DI_gdbv+"\\"+DI_XREF[x][0],fc_temp,DI_XREF[x][1])
    elif layertype == 'IHS':
        if gdbversion =='931':
            IHS_gdbv = r"\\shares\backups\qgis-workspace\IHS\IHS_931.gdb"
        else:
            IHS_gdbv = r"\\shares\backups\qgis-workspace\IHS\IHS_US_BASE_SPATIAL_LAYERS_BLACKSTONE\IHS_US_BASE_SPATIAL_LAYERS_BLACKSTONE.gdb"

        i = len(IHS_XREF)
            
        for x in range(0,i):
            fc_temp = EXT_VENDOR_BSM_QGIS510_sde + "\\" + IHS_XREF[x][1]+"_T"
            FCCopy(IHS_gdbv+"\\"+IHS_XREF[x][0],fc_temp,IHS_XREF[x][1])        

def DelStg(temp,fcname):
    if gp.Exists(temp):
        gp.Delete_management(temp, "FeatureClass")
        logstr('     -- Deleted '+fcname)   
    
def DelTemp(layertype):
    if layertype == 'DI':
        i = len(DI_XREF)
        
        for x in range(0,i):
            fc_temp = EXT_VENDOR_BSM_QGIS510_sde + "\\" + DI_XREF[x][1]+"_T"
            DelStg(fc_temp,DI_XREF[x][1]+"_T")
            
    elif layertype == 'IHS':
        i = len(IHS_XREF)
        
        for x in range(0,i):
            fc_temp = EXT_VENDOR_BSM_QGIS510_sde + "\\" + IHS_XREF[x][1]+"_T"
            DelStg(fc_temp,IHS_XREF[x][1]+"_T")
        

# Replaces feature classes with new layers
def ReplaceFCstg(fc,temp,fcname):
    gp2 = arcgisscripting.create() # for some reason the script connection is dropped after restarting Oracle
    if gp2.Exists(fc) and gp2.Exists(temp):
        
        gp2.Delete_management(fc, "FeatureClass")
        gp2.Rename_management(temp, fc, "FeatureClass")
        logstr('     -- Replaced '+fcname)
        
    '''else:
        logstr(fc + ' ' + temp)
        logstr('     -- Did Not Replace '+fcname+'... due to missing temp file or fc...')'''

def ReplaceFC(replacetype):
    if replacetype == 'IHS':
        i = len(IHS_XREF)
        
        for x in range(0,i):
            fc_temp = EXT_VENDOR_BSM_QGIS510_sde + "\\EXT_VENDOR." + IHS_XREF[x][1]+"_T"
            fc_replace = EXT_VENDOR_BSM_QGIS510_sde + "\\EXT_VENDOR." + IHS_XREF[x][1]
            
            ReplaceFCstg(fc_replace,fc_temp,IHS_XREF[x][1])
        
    if replacetype == 'DI':
        i = len(DI_XREF)
        
        for x in range(0,i):
            fc_temp = EXT_VENDOR_BSM_QGIS510_sde + "\\EXT_VENDOR." + DI_XREF[x][1]+"_T"
            fc_replace = EXT_VENDOR_BSM_QGIS510_sde + "\\EXT_VENDOR." + DI_XREF[x][1]
            
            ReplaceFCstg(fc_replace,fc_temp,DI_XREF[x][1])    

#Close connections and start services back up again
def CloseService(server_name,service_name):
    #subprocess.call('net stop "ArcGIS Server Object Manager"')
    close = "sc \\\\"+server_name+' stop '+service_name
    p = Popen(close).wait()
    if p == 0:
        logstr('     -- Stopped '+service_name+' on '+server_name)
    #print osclose
        
def StartService(server_name,service_name):
    #subprocess.call('net start "ArcGIS Server Object Manager"')
    start = "sc \\\\"+server_name+' start '+service_name
    p = Popen(start).wait()

    if p ==0:
        logstr('     -- Started '+service_name+' on '+server_name)
    
def restart(server_name,service_name,email_list,cc_list):
    start_time = 0
    close_status = 'sc \\\\'+ server_name +' query '+ service_name +' | find "STOPPED"'
    start_status = 'sc \\\\'+ server_name +' query '+ service_name +' | find "RUNNING"'
    pending_start_status = 'sc \\\\'+ server_name +' query '+ service_name +' | find "START_PENDING"'
    pending_close_status = 'sc \\\\'+ server_name +' query '+ service_name +' | find "STOP_PENDING"'
    close = "sc \\\\"+server_name+' stop '+service_name
    start = "sc \\\\"+server_name+' start '+service_name
    
    running = Popen(start_status,shell=True).wait()

    if running==0:
        print ('Oracle Service is closing')
        Popen(close,shell=True).wait()
        #time.sleep(60)
        close_pending = Popen(pending_close_status,shell=True).wait()
        print close_pending
        
        while close_pending == 0:

            time.sleep(15) #Give the process time to close before checking the status
            closed = Popen(close_status,shell=True).wait()
            start_time += 15
            
            if closed == 0:
                print ('Oracle service has been stopped.  Restarting...')
                Popen(start,shell=True).wait()
                close_pending = Popen(pending_close_status,shell=True).wait() # This should stop the outside loop
                start_pending = Popen(pending_start_status,shell=True).wait() # Make sure Oracle has restarted before doing anything else
                print start_pending
                while start_pending == 0:
                    
                    time.sleep(15)
                    start = Popen(start_status,shell=True).wait()
                    
                    if start ==0:
                        time.sleep(30)
                        start_pending = Popen(pending_start_status,shell=True).wait() 
                
            elif start_time > 600:
                
                #Service has not closed after 10 minutes... Check the status and send an email notification
                close_pending = 1 #Force quit the loop and send an email notification
                send_mail('LayerLoad@blackstoneminerals.com',email_list,cc_list,'Layer Load Error for ' + datetime.now().strftime('%m-%d-%Y'),'The layer load has experienced an error restarting ' +service_name+'.  This error has occurred on '+server_name+'.',[])
    		
		
#logging information
def logstr(s):
    print(s)
    print('')
    logging.info(s)
    logging.info('')

def CloseConnections(layertype,oracleserver,oracleservice,gisserver,gisservice,email_list,cc_list,logfile,start_time):
    logstr('1. Closing ArcGIS SOM...')
    CloseService(gisserver,gisservice)

    logstr('2. Restart GIS Oracle service to remove table locks...')
    restart(oracleserver,oracleservice,email_list,cc_list)
    
def RenameLayers(layertype,gisserver,gisservice,email_list,cc_list,logfile,start_time):
    logstr('3. Deleting existing features and renaming...')
    ReplaceFC(layertype)

    logstr('4. Starting ArcGIS SOM...')
    StartService(gisserver,gisservice)
    
    logstr('5. Renamed layers successfully..')
    logstr('Script ended at ' + datetime.now().strftime('%H:%M'))
    script_time = str(time.time() - start_time)
    logstr('Time to execute script ' + script_time + " seconds")
    os.chdir(current_dir)
    send_mail('LayerLoad@blackstoneminerals.com',email_list,cc_list,'Layer Load for ' + datetime.now().strftime('%m-%d-%Y'),'The layer load has replaced the layers successfully.  Please review the attached log file for additional details.',[logfile])

def CopyComplete(db,dbuser,dbpw,layertype):
    sql = "UPDATE LAYER_LOAD SET PROCESS_STEP = 'C_COMPLETE' WHERE LAYER_TYPE = '"+args.layertype[0] +"'"
    db = cx_Oracle.connect(dbuser + "/" + dbpw + "@" + db)
    c = db.cursor()

    c.execute(sql)
    c.execute("commit")
    c.close()
    db.close()

def ResetStatus(db,dbuser,dbpw,layertype):
    sql = "UPDATE LAYER_LOAD SET PROCESS_STEP = '1' WHERE LAYER_TYPE = '"+args.layertype[0] +"'"
    db = cx_Oracle.connect(dbuser + "/" + dbpw + "@" + db)
    c = db.cursor()

    c.execute(sql)
    c.execute("commit")
    c.close()
    db.close()
    
try:
    current_dir = os.getcwd()
    #Remove any temporary feature classes
    #Define variables and environment
    parser = argparse.ArgumentParser(description = 'Replaces Drilling Info layers and sends email notification when process has completed.')
    parser.add_argument("-sde", required=True, help="SDE Connection for EXT_VENDOR schema should have the format of EXT_VENDOR@[DB]", type = str, nargs = 1)
	
    parser.add_argument("-proctype",required =True, help="COPY,CLOSE, RENAME", type = str, nargs = 1)
    parser.add_argument("-gisserver", help="Name of server hosting GIS services", type = str, nargs = 1)
    parser.add_argument("-gisservice", help="Name of the SOM service", type = str, nargs = 1)
    parser.add_argument("-oraserver", help="Name of Oracle server", type = str, nargs = 1)
    parser.add_argument("-oraservice", help="Name of Oracle service", type = str, nargs = 1)
    parser.add_argument("-layertype", help="Either IHS or DI layer type", type = str, nargs = 1)
    parser.add_argument("-gdbversion", help="Version of gdb files either 10 or 931", type = str, nargs = 1)

    parser.add_argument("-db", help="Database source", type = str, nargs = 1)
    parser.add_argument("-dbuser", help="Database user", type = str, nargs = 1)
    parser.add_argument("-dbpw", help="Database pw", type = str, nargs = 1)        

    #parser.add_argument("-runt", help="run or rename", type = str, nargs = 1)        
    
    parser.add_argument("-e",required=True, help="List of recipient emails", type = str, nargs = '+')
    parser.add_argument("-cc", help="List of email recipients",type =str, nargs = '+')                  
    args = parser.parse_args()

    #Check if layers were downloaded before doing any processing
    '''DI_textfile = "DI_process.txt"
    IHS_textfile = "IHS_process.txt"'''
    run = False
    renamerun = False

    DB = args.db[0]
    DBUSER = args.dbuser[0]
    DBPW = args.dbpw[0]
    
    sql = "SELECT PROCESS_STEP FROM LAYER_LOAD WHERE LAYER_TYPE = '"+args.layertype[0] +"'"
    db = cx_Oracle.connect(args.dbuser[0] + "/" + args.dbpw[0] + "@" + args.db[0])
    c = db.cursor()

    c.execute(sql)
    proc_step = c.fetchall()
    c.close()
    db.close()
    print proc_step[0]
    if 'COPY' in proc_step[0]:
        run = True
    elif 'C_COMPLETE' in proc_step[0]:
        renamerun = True        
            
    if run:
        SDE_CONNECTION = args.sde[0]
        LAYER_TYPE = args.layertype[0]
        #Create log file
        LOGFILE = datetime.now().strftime(LAYER_TYPE+'_LayerLoad_%d_%m_%Y.log')
        logging.basicConfig(filename=LOGFILE,level=logging.INFO)
        
        logstr('Starting script at ' + datetime.now().strftime('%H:%M'))
        start_time = time.time()
        
        #DB connection
        EXT_VENDOR_BSM_QGIS510_sde = "Database Connections\\"+SDE_CONNECTION+".sde"
            
        if args.proctype[0] == 'COPY':
            GDB_VERSION =args.gdbversion[0]
            
            logstr('1. Deleting any temporary features...')
            DelTemp(LAYER_TYPE)
            logstr('2. Copying '+ LAYER_TYPE +' temp features to EXT_VENDOR...')
            LayerCopy(LAYER_TYPE,GDB_VERSION)
            
            script_time = str(time.time() - start_time)
            logstr('3. Script Complete..')
            logstr('Script ended at ' + datetime.now().strftime('%H:%M'))
            logstr('Time to execute script ' + script_time + " seconds")
            send_mail('LayerLoad@blackstoneminerals.com',args.e,args.cc,'Layer Load for ' + datetime.now().strftime('%m-%d-%Y'),'The layer load has copied the layers into the EXT_VENDOR schema.  Please review the attached log file for additional details.',[LOGFILE])

            CopyComplete(DB,DBUSER,DBPW,LAYER_TYPE)
    
    if renamerun:
        LAYER_TYPE = args.layertype[0]
        LOGFILE = datetime.now().strftime(LAYER_TYPE+'_LayerLoad_%d_%m_%Y.log')
        logging.basicConfig(filename=LOGFILE,level=logging.INFO)
        #print args.proctype[0]
        start_time = time.time()
        #modify this to check the text file for COPY COMPLETE    
        if args.proctype[0] == 'CLOSE':
            print 'Closing connections'
            ORACLE_SERVER = args.oraserver[0]
            ORACLE_SERVICE = args.oraservice[0]
            GIS_SERVER = args.gisserver[0]
            GIS_SERVICE = args.gisservice[0]
            logstr('Closing Oracle connections '+ ORACLE_SERVICE +' at ' + datetime.now().strftime('%H:%M'))
            CloseConnections(LAYER_TYPE,ORACLE_SERVER,ORACLE_SERVICE,GIS_SERVER,GIS_SERVICE,args.e,args.cc,LOGFILE,start_time)

        elif args.proctype[0] == 'RENAME':
            SDE_CONNECTION = args.sde[0]
            GIS_SERVER = args.gisserver[0]
            GIS_SERVICE = args.gisservice[0]
            EXT_VENDOR_BSM_QGIS510_sde = "Database Connections\\"+SDE_CONNECTION+".sde"
            RenameLayers(LAYER_TYPE,GIS_SERVER,GIS_SERVICE,args.e,args.cc,LOGFILE,start_time)
            ResetStatus(DB,DBUSER,DBPW,LAYER_TYPE)
   
finally:
    print('Complete')
    
    
    
