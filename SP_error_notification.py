# ---------------------------------------------------------------------------
# Created on: 04/03/2014
#   (generated by Waygene Koay)
# Description: Script determines if there are any errors or records with more than 400 linked agmts
# ---------------------------------------------------------------------------

# Import arcpy module
import cx_Oracle,sys,os,logging,argparse
from datetime import datetime
from datetime import date
from helpers.email_helper import send_mail
    

def error_check(db,user,pw,elist,cclist):
    send_email_chk = False
    OraUid=USER_INPUT       #Oracle User  
    OraPwd=PW_INPUT       #Oracle password
    OraService=DB_INPUT    #Oracle Service name From Tnsnames.ora file
    db = cx_Oracle.connect(OraUid + "/" + OraPwd + "@" + OraService) 
    c = db.cursor()

    #SP Integration errors
    sql = "SELECT LPAD(PROCESS_LOG_ID,18,' ') || LPAD(LOG_MSG_TYPE_CD,LENGTH(LOG_MSG_TYPE_CD)+30,' ')|| LPAD(LOG_DATE,LENGTH(LOG_DATE)+17,' ') || LPAD(LOG_MSG,LENGTH(LOG_MSG)+10, ' ') FROM QARCH_PROCESS_MSG_LOG_AR_VW WHERE LOG_MSG_TYPE_CD = 'ERROR' "
    sql = sql + " AND LOG_MSG NOT IN ('QEventLoader.SetStandard failed!EventID: 40.','Event not loaded for EventID: 40 due to an unknown error.') "
    sql = sql + " and TRUNC(LOG_DATE)= TRUNC(SYSDATE) "
    sql = sql + " ORDER BY LOG_DATE DESC"

    #Records that have more than 400 agreements tied to the document.  Will not have to run this later
    sql2 = "SELECT DOC_ID FROM ( SELECT  XREF.DOC_ID, AA.AGMT_NUM FROM ALL_AGREEMENTS AA INNER JOIN STIPULATION_DATE SD ON SD.ARRG_KEY = AA.ARRG_KEY "                                                      
    sql2 += " INNER JOIN QXREF_LAND_DOC XREF ON XREF.STIP_KEY = SD.STIP_KEY "
    sql2 += " JOIN QTRAN_DOCMGMT_DOC_RESET DR ON TRIM(CAST(XREF.DOC_ID AS CHAR(50))) = TRIM(CAST(DR.DOC_ID AS CHAR(50))) "
    sql2 += " WHERE DR.SYNCH_STATUS_CD = 0 "
    sql2 += " group BY XREF.DOC_ID, AA.AGMT_NUM) GROUP BY DOC_ID HAVING COUNT(1)>400 "

    #Update statement for documents linked to more than 400 agreements
    sql_updt = " UPDATE QTRAN_DOCMGMT_DOC_RESET DR1 SET SYNCH_STATUS_CD = 5 WHERE TRIM(CAST(DOC_ID AS CHAR(50))) IN ( "
    sql_updt += " SELECT DOC_ID FROM ( "
    sql_updt += " SELECT  XREF.DOC_ID, AA.AGMT_NUM "
    sql_updt += " FROM ALL_AGREEMENTS AA "
    sql_updt += " INNER JOIN STIPULATION_DATE SD ON SD.ARRG_KEY = AA.ARRG_KEY "                                                       
    sql_updt += " INNER JOIN QXREF_LAND_DOC XREF ON XREF.STIP_KEY = SD.STIP_KEY "
    sql_updt += " JOIN QTRAN_DOCMGMT_DOC_RESET DR ON TRIM(CAST(XREF.DOC_ID AS CHAR(50))) = TRIM(CAST(DR.DOC_ID AS CHAR(50))) "
    sql_updt += " WHERE DR.SYNCH_STATUS_CD = 0 "
    sql_updt += " group BY XREF.DOC_ID, AA.AGMT_NUM) GROUP BY DOC_ID HAVING COUNT(1)>400)"

    c.execute(sql)
    rows = c.fetchall()
    email_body = 'SharePoint integration has encountered an error.  Please check the following records in QARCH_PROCESS_MSG_LOG_AR_VW. \n \n'
    
    if len(rows) > 0:
        email_body += 'Process Log ID     |     Message Type     |     Log Date     |     Description \n'
        send_email_chk = True
        for row in rows:
            email_body += str(row) + '\n'

        

    c.execute(sql2)
    rows2 = c.fetchall()

    if len(rows2)>0:
        send_email_chk = True
        email_body += '\n'
        email_body += 'The following document(s) are linked to more than 400 agreements.  These records have been placed in a pending status. \n'
        for row in rows2:
            email_body += str(row) + '\n'

        c.execute(sql_updt)
        c.execute("commit")
        print ('Records updated')
        
    if send_email_chk:
        #print('Sending email')
        email_body = str.replace(email_body,"('",'')
        email_body = str.replace(email_body,",)",'')
        send_mail('SP_ErrorCheck@blackstoneminerals.com',elist,cclist,'SharePoint Errror Notification for '+datetime.now().strftime('%m-%d-%Y'),email_body,[])

    
    c.close()
        
try:
    # Local variables:
    #Input database and PW information then run script
    parser = argparse.ArgumentParser(description = 'Checks Sharepoint integration logs to ensure that the process is not stuck or has not integrated records.')
    parser.add_argument("-d", help="Database TNS name", type = str, nargs = 1)    
    parser.add_argument("-u", help="Schema where log table resides", type = str, nargs = 1)
    parser.add_argument("-p", help="Password to database", type = str, nargs = 1)
    parser.add_argument("-m", help="Optional: Allows prompt of database information, user, and password. Enter a value of TRUE or FALSE (in uppercase).  Default value is False. ", type = str, default = 'False')
    parser.add_argument("-e", help="List of email recipients",type =str, nargs = '+')
    parser.add_argument("-cc", help="List of email recipients",type =str, nargs = '+')                  
    args = parser.parse_args()

    if str(args.m) == 'TRUE':
        DB_INPUT = raw_input("ENTER DB NAME: ")
        USER_INPUT =  raw_input("ENTER DB USER/SCHEMA: ")
        PW_INPUT = raw_input("ENTER PW: ")
        EMAIL_LIST = raw_input("ENTER LIST OF EMAIL(S) SEPARATED BY A SPACE: ")
        EMAIL_INPUT = EMAIL_LIST.split(" ")
        
    elif len(args.d[0])>0 and len(args.u[0])>0 and len(args.p[0])>0 and len(args.e[0])>0:
        DB_INPUT = str(args.d[0])
        USER_INPUT =  str(args.u[0])
        PW_INPUT = str(args.p[0])
        EMAIL_INPUT = args.e
        CC_LIST = args.cc
    else:
        raise Exception ("ERROR: Invalid or missing parameters have been passed into the script.")

    error_check(DB_INPUT,USER_INPUT,PW_INPUT,EMAIL_INPUT,CC_LIST)
    
    
        
finally:
    print ('End of script')
