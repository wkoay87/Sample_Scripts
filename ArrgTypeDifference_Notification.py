# ---------------------------------------------------------------------------
# 002.GIS.100395.INSERT_MISSING_RLTN.py
# Created on: 04/03/2014
#   (generated by Waygene Koay)
# Description: Script determines if there are any errors or records with more than 400 linked agmts
# ---------------------------------------------------------------------------

# Import arcpy module
import cx_Oracle,sys,os,logging,argparse
from datetime import datetime
from datetime import date

from helpers.email_helper import send_mail
from helpers import SQL_helper

def error_check(db,user,pw,elist):
    send_email_chk = False
    OraUid=USER_INPUT       #Oracle User  
    OraPwd=PW_INPUT       #Oracle password
    OraService=DB_INPUT    #Oracle Service name From Tnsnames.ora file
    db = cx_Oracle.connect(OraUid + "/" + OraPwd + "@" + OraService) 
    c = db.cursor()

    # Agreements where the header and subdivision types do not match
    sql = SQL_helper.ARRG_DIF_SQL
    
    #Update statement for documents linked to more than 400 agreements
    sql_updt = SQL_helper.ARRG_DIF_UPDT_SQL

    c.execute(sql)
    rows = c.fetchall()
    
    email_body = 'The following QLS agreements have different agreement types at the header and subdivision level.  The subdivision records have been updated to reflect the header agreement type. \n \n'
    
    if len(rows) > 0:
        max_len = max(max(map(len,l)) for l in rows)
        fmt=('{:^%d}' % max_len).format('%s')

        print('Records that do not match found!')
        email_body += '{:<30}'.format('Agreement Number')+'{:<30}'.format('Sub #')+'{:<40}'.format('From:To Agreement Type')+ '\n'
        send_email_chk = True

        for row in rows:
            #email_body += '{:<30}'.format(str(row[0])) +'{:<40}'.format(str(row[1]))+'{:<30}'.format(str(row[2]))+'{:<30}'.format(str(row[3]))+"\n"
            #mail_body += ' '.join(('{:<%s}' % (max_len)).format(e) for e in row)+'\n'
            email_body += ' '.join(row) + '\n'

        email_body += '\n'
        email_body += 'If you have any questions or concerns regarding this email.  Please contact the Information Technology group at InformationTechnology@blackstoneminerals.com.'
        print email_body
        c.execute(sql_updt)
        c.execute("commit")
                
    if send_email_chk:
        #print('Sending email')
        email_body = str.replace(email_body,"('",'')
        email_body = str.replace(email_body,",)",'')
        send_mail('DataIntegrityCheck@blackstoneminerals.com',elist,'QLS Errror Notification for '+datetime.now().strftime('%m-%d-%Y'),email_body,[])

    
    c.close()
        
try:
    # Local variables:
    #Input database and PW information then run script
    parser = argparse.ArgumentParser(description = 'Checks if there are any agreement types differences at the header and subdivision level.')
    parser.add_argument("-d", help="Database TNS name", type = str, nargs = 1)    
    parser.add_argument("-u", help="Schema where log table resides", type = str, nargs = 1)
    parser.add_argument("-p", help="Password to database", type = str, nargs = 1)
    parser.add_argument("-m", help="Optional: Allows prompt of database information, user, and password. Enter a value of TRUE or FALSE (in uppercase).  Default value is False. ", type = str, default = 'False')
    parser.add_argument("-e", help="List of email recipients",type =str, nargs = '+')              
    args = parser.parse_args()

    if str(args.m) == 'TRUE':
        DB_INPUT = raw_input("ENTER DB NAME: ")
        USER_INPUT =  raw_input("ENTER DB USER/SCHEMA: ")
        PW_INPUT = raw_input("ENTER PW: ")
        EMAIL_LIST = raw_input("ENTER LIST OF EMAIL(S) SEPARATED BY A SPACE: ")
        EMAIL_INPUT = EMAIL_LIST.split(" ")
        
    elif len(args.d[0])>0 and len(args.u[0])>0 and len(args.p[0])>0 and len(args.e[0])>0:
        DB_INPUT = str(args.d[0])
        USER_INPUT =  str(args.u[0])
        PW_INPUT = str(args.p[0])
        EMAIL_INPUT = args.e
    else:
        raise Exception ("ERROR: Invalid or missing parameters have been passed into the script.")

    error_check(DB_INPUT,USER_INPUT,PW_INPUT,EMAIL_INPUT)
    
    
        
finally:
    print ('End of script')
