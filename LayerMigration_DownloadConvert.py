# ---------------------------------------------------------------------------
# IHS_DrillingInfo_Migration.py
# Created on: 04/092014
# 
# Requirements:
#   1. Script requires Python 2.6 or higher
#   2. WGET
#   3. ArcGIS 10.0 or higher
#
#	Note cannot copy layers to 931 from ArcGIS 10.0 
# 	Have to separate scripts out to perform downloading, unzipping, and then copying layers into 931 format
#	
#   (generated by ArcGIS/ModelBuilder)
# ---------------------------------------------------------------------------

# Import system modules
#import sys, string, os, arcgisscripting, logging, time,argparse,zipfile
import sys, string, os, arcpy, logging, time,argparse,zipfile,selenium,string,shutil,cx_Oracle
from datetime import datetime
from datetime import date
from subprocess import *
from selenium import webdriver
from selenium.webdriver.common.keys import Keys

from email_helper import send_mail

#logging information
def logstr(s):
    print(s)
    print('')
    logging.info(s)
    logging.info('')

def FCCopy(stg,temp,stgname):
    if arcpy.Exists(stg):
        arcpy.CopyFeatures_management(stg, temp, "", "0", "0", "0")
        logstr('     -- Copied '+stgname)

def CopyTrue(db,user,pw,downloadtype):
    OraUid=user       #Oracle User  
    OraPwd=pw       #Oracle password
    OraService=db    #Oracle Service name From Tnsnames.ora file
    #logstr('connecting to db...')
    db = cx_Oracle.connect(OraUid + "/" + OraPwd + "@" + OraService) 
    c = db.cursor()

    sql = "UPDATE LAYER_LOAD SET PROCESS_STEP = 'COPY' WHERE LAYER_TYPE = '"+downloadtype+"'"

    c.execute(sql)
    c.execute("commit")
    c.close()
    db.close()
    
def DownloadLayers(downloadtype,url,user,pw,directory,db,dbuser,dbpw):
    #Download layers from IHS FTP/Drillinginfo website
    chromedriver = directory+r"\chromedriver"
    os.environ["webdriver.chrom.driver"] = chromedriver
    driver = webdriver.Chrome(chromedriver)
    driver.get(url)

    GIS_folder = r"\\shares\\backups\\qgis-workspace"
    os.chdir(GIS_folder)
    # Do not continue layer migration unless files are downloaded from IHS or Drilling Info
    continue_process = False 
    unzip = False
    zip_files = ""
    
    if downloadtype =='IHS':
        
        #check current file name and file on FTP
        table_element = driver.find_element_by_id("table")
        table_list = table_element.text.split("\n")

        for row in table_list:
            if 'IHS_US_BASE_SPATIAL_LAYERS_BLACKSTONE' in row:
                IHS_ROW = row.split()

        date_modified = string.replace(str(IHS_ROW[3]),"/","_")
        IHS_zip = "IHS_"+str(date_modified)+".zip"
        print IHS_zip
	
        if os.path.isfile(IHS_zip):
            #if there is a file with the current date modified do nothing
            logstr('IHS layers have not been updated on FTP. No action required...')
            bdownload = False            
            driver.quit()
            sys.exit()
        else:
            bdownload = True
            driver.quit()
            
        if bdownload:
                    
            call("WGET "+url+"/IHS_US_BASE_SPATIAL_LAYERS_BLACKSTONE.zip")
            logstr('     -- Downloaded IHS layers from FTP')
            
            myzip = "\\\\shares\\backups\\qgis-workspace\\IHS_US_BASE_SPATIAL_LAYERS_BLACKSTONE.zip"
            zipdir = "\\\\shares\\backups\\qgis-workspace\\IHS\\IHS_US_BASE_SPATIAL_LAYERS_BLACKSTONE"

            if os.path.isdir(r"\\shares\backups\qgis-workspace\IHS\IHS_US_BASE_SPATIAL_LAYERS_BLACKSTONE\IHS_US_BASE_SPATIAL_LAYERS_BLACKSTONE.gdb"):
                shutil.rmtree(r"\\shares\backups\qgis-workspace\IHS\IHS_US_BASE_SPATIAL_LAYERS_BLACKSTONE\IHS_US_BASE_SPATIAL_LAYERS_BLACKSTONE.gdb")
            
            zip_file = zipfile.ZipFile(myzip,'r')
            zip_file.extractall(zipdir)
            zip_file.close()
            
            logstr('     -- Unzipped IHS layers')
            continue_process = True
            zip_files = "IHS_US_BASE_SPATIAL_LAYERS_BLACKSTONE"
            shutil.move("IHS_US_BASE_SPATIAL_LAYERS_BLACKSTONE.zip",IHS_zip)
            #This lets the next process know to stage the layers in QGIS
            #CopyTrue(db,dbuser,dbpw,downloadtype)
            '''os.chdir(directory)
            IHS_textfile = "IHS_process.txt"
            file = open(IHS_textfile,"w")
            file.write("COPY")
            file.close()'''
            

    elif downloadtype == 'DI':
        
        username_login = driver.find_element_by_id("username")
        pw_login = driver.find_element_by_id("password")
        click_login = driver.find_element_by_id("btnLogin")

        pw_login.send_keys(pw)
        username_login.send_keys(user)
        click_login.click()

        time.sleep(3)

        modified = driver.find_element_by_class_name("columnModified").text
        date_modified = string.replace(modified,"/","_")

        DI_zip = 'archive_'+date_modified
        
        if os.path.isfile(DI_zip+".zip"):        
            logstr('Drilling Info layers have not been updated on FTP. No action required...')
            bdownload = False            
            driver.quit()
        else:
            bdownload = True
            
        if bdownload:
            #driver.get("https://fileshare.drillinginfo.com/#/diplus/")
            checkbox = driver.find_element_by_class_name("chkBox")
            checkbox.click()

            driver.execute_script("performAction('download')")
            #DI site automatically downloads zip file to user download folder
            user_profile = os.environ['USERPROFILE']

            dl_folder = user_profile + r"\Downloads"
            DI_file = user_profile + r"\Downloads\archive.zip"
            dl_process = True
            
            os.chdir(dl_folder)
            dl_time = 0 
            while dl_process:
                #Check if process has finished.  Should take about 5-10 minutes
                if "archive.zip" in os.listdir(""):
                    shutil.move(DI_file,GIS_folder)
                    dl_process = False
                    unzip = True
                else:
                    time.sleep(15)
                    dl_time+=15

                    if dl_time > 7200:
                        logstr('Error: downloading Drilling Info file')
                        dl_process = False
                        
            if unzip:
                driver.quit()
                logstr('     -- Drilling Info layers have been downloaded')
                os.chdir(GIS_folder)
                os.rename("archive.zip",DI_zip+".zip")
                myzip = "\\\\shares\\backups\\qgis-workspace\\"+DI_zip+".zip"
                zipdir = "\\\\shares\\backups\\qgis-workspace\\DRILLINGINFO"
                zip_file = zipfile.ZipFile(myzip,'r')
                #Have to unzip files from archive.zip

                DI_zip_files = zip_file.namelist()
                DI_zip_files = [word.replace('diplus/','') for word in DI_zip_files]
                zip_files = DI_zip_files
                
                zip_file.extractall(zipdir)
                zip_file.close()
                
                logstr('     -- Unzipping Drilling Info layers...')
                for difile in DI_zip_files:
                    shutil.move("\\\\shares\\backups\\qgis-workspace\\DRILLINGINFO\\diplus\\"+difile,zipdir)
                    dizip = "\\\\shares\\backups\\qgis-workspace\\DRILLINGINFO\\" + difile
                    di_zipfile = zipfile.ZipFile(dizip,'r')
                    di_zipfile.extractall(zipdir)
                    di_zipfile.close()
            
                logstr('     -- All Drilling Info layers have been unzipped...')
                print DI_zip_files
                #continue_process = [True,DI_zip_files]
                continue_process = True
                #CopyTrue(db,dbuser,dbpw,downloadtype)
                
        if os.path.isdir("\\\\shares\\backups\\qgis-workspace\\DRILLINGINFO\\diplus"):
            shutil.rmtree("\\\\shares\\backups\\qgis-workspace\\DRILLINGINFO\\diplus")

    return continue_process, zip_files

def Convert10(layertype,gdbnames,convert):
    if layertype == 'DI':
        if convert == 'Y':
            gdb_931 = r"\\shares\backups\qgis-workspace\DRILLINGINFO\DI_931.gdb"
            arcpy.env.workspace = gdb_931
            
            for objFeatureClass in arcpy.ListFeatureClasses():
                arcpy.Delete_management(objFeatureClass)

            DI_gdb = [word.replace('.zip','') for word in gdbnames]

            for gdb in DI_gdb:
                gdb_10 = r"\\shares\backups\qgis-workspace\DRILLINGINFO"+"\\"+gdb+".gdb"
                arcpy.env.workspace = gdb_10
                for FC in arcpy.ListFeatureClasses():
                    FCCopy(gdb_10+"\\"+FC,gdb_931+"\\"+FC,FC)
                    
        elif convert =='N':
            gdb_10_combined = r"\\shares\backups\qgis-workspace\DRILLINGINFO\DI_10.gdb"

            DI_gdb = [word.replace('.zip','') for word in gdbnames]

            for gdb in DI_gdb:
                gdb_10 = r"\\shares\backups\qgis-workspace\DRILLINGINFO"+"\\"+gdb+".gdb"
                arcpy.env.workspace = gdb_10
                for FC in arcpy.ListFeatureClasses():
                    FCCopy(gdb_10+"\\"+FC,gdb_10_combined+"\\"+FC,FC)
            
    elif layertype == 'IHS':
        if convert=='Y':
            gdb_931 = r"\\shares\backups\qgis-workspace\IHS\IHS_US_BASE_SPATIAL_LAYERS_BLACKSTONE\IHS_931.gdb"
            arcpy.env.workspace = gdb_931
            for objFeatureClass in arcpy.ListFeatureClasses():
                arcpy.Delete_management(objFeatureClass)

            gdb = gdbnames
        
            gdb_10 = r"\\shares\backups\qgis-workspace\IHS\IHS_US_BASE_SPATIAL_LAYERS_BLACKSTONE"+"\\"+gdb+".gdb"
            arcpy.env.workspace = gdb_10
            for FC in arcpy.ListFeatureClasses():
                FCCopy(gdb_10+"\\"+FC,gdb_931+"\\"+FC,FC)            
    
def CopyLayers(layertype,url,user,pw,directory,convert,emails,cc_email,logfile,db,dbuser,dbpw):
    logstr('1. Downloading and unzipping files...')
    check_process,zipfiles =  DownloadLayers(layertype,url,user,pw,directory,db,dbuser,dbpw)
    #check_process = True
    if check_process:
        logstr('2. Checking if layers need to be converted from 10.0 to 9.3.1...')
        Convert10(layertype,zipfiles,convert)
        
        os.chdir(directory)        
        
        logstr('Updating layer load table...')
        CopyTrue(db,dbuser,dbpw,layertype)

        logstr('Sending emails...')
        send_mail('LayerLoad@blackstoneminerals.com',emails,cc_email,layertype + ' Layer download for ' + datetime.now().strftime('%m-%d-%Y'),'The layer have been downloaded and unzipped successfully.  Please review the attached log file for additional details.',[logfile])
    
try:
    #Remove any temporary feature classes
    #Define variables and environment
    current_dir = os.getcwd()
    parser = argparse.ArgumentParser(description = 'Replaces IHS/DrillingInfo layers and sends email notification when process has completed.')
    
    parser.add_argument("-convert",  help="Value of Y indicates converting of GIS layers from 10 to 931", type = str, nargs = 1)
    parser.add_argument("-layertype", help="Either IHS or DI layer type", type = str, nargs = 1)
    
    parser.add_argument("-url", help="URL to download layers from", type = str, nargs = 1)
    parser.add_argument("-user", help="Username for URL", type = str, nargs = 1)
    parser.add_argument("-pw", help="Password for url", type = str, nargs = 1)

    parser.add_argument("-d", help="Drilling Info number", type = str, nargs = 1)
    parser.add_argument("-e",required=True, help="List of recipient emails", type = str, nargs = '+')
    parser.add_argument("-cc", help="List of email recipients",type =str, nargs = '+')
    
    parser.add_argument("-db", help="Database source", type = str, nargs = 1)
    parser.add_argument("-dbuser", help="Database user", type = str, nargs = 1)
    parser.add_argument("-dbpw", help="Database pw", type = str, nargs = 1)    
    
    args = parser.parse_args()

    LAYER_TYPE = args.layertype[0]
    CONVERT = args.convert[0]
    URL = args.url[0]
    USER = args.user[0]
    PW = args.pw[0]

    DB = args.db[0]
    DBUSER =args.dbuser[0]
    DBPW = args.dbpw[0]

    if LAYER_TYPE == "DI":
        DI = str(args.d[0])
        DI_NUM = str(int(date.today().isocalendar()[1]) -1)
    
    #Copy process will download layers from IHS FTP, unzip, and convert the layers from 10 to 931
    #Create log file
    LOGFILE = datetime.now().strftime(LAYER_TYPE+'_LayerConversion_%m_%d_%Y.log')
    logging.basicConfig(filename=LOGFILE,level=logging.INFO)

    start_time = time.time()
    
    logstr('Starting copy of '+LAYER_TYPE +' layers at ' + datetime.now().strftime('%H:%M'))
    CopyLayers(LAYER_TYPE,URL,USER,PW,current_dir,CONVERT,args.e,args.cc,LOGFILE,DB,DBUSER,DBPW)
    
    
finally:
    print 'End of Script'
